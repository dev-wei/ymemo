# YMemo Audio Processing Pipeline Configuration
# Modern Python project configuration following PEP 518/621

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ymemo"
version = "1.0.0"
description = "Real-time voice meeting transcription with AWS Transcribe and Azure Speech Service"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "YMemo Team", email = "team@ymemo.dev"},
]
maintainers = [
    {name = "YMemo Team", email = "team@ymemo.dev"},
]
keywords = [
    "audio",
    "transcription",
    "speech-recognition",
    "aws-transcribe",
    "azure-speech",
    "real-time",
    "meeting-notes"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "gradio>=5.38.2",
    "python-dotenv>=1.0.1",
    "boto3>=1.35.84",
    "botocore>=1.35.84",
    "asyncio-throttle>=1.0.2",
    "SpeechRecognition>=3.12.0",
    "pyaudio>=0.2.14",
    "amazon-transcribe>=0.6.0",
    "azure-cognitiveservices-speech>=1.45.0",
    "supabase>=2.0.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xvfb>=3.0.0",
    "coverage[toml]>=7.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.8",
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "pydocstyle>=6.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xvfb>=3.0.0",
    "coverage[toml]>=7.0.0",
]
quality = [
    "ruff>=0.1.8",
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "pydocstyle>=6.3.0",
]

[project.scripts]
ymemo = "main:main"

[project.urls]
Homepage = "https://github.com/ymemo/ymemo"
Documentation = "https://github.com/ymemo/ymemo#readme"
Repository = "https://github.com/ymemo/ymemo.git"
"Bug Tracker" = "https://github.com/ymemo/ymemo/issues"
Changelog = "https://github.com/ymemo/ymemo/blob/main/CHANGELOG.md"

# Tool configurations
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

# Ruff configuration (fast Python linter and formatter)
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/fixtures/**",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PIE", # flake8-pie
]
ignore = [
    "E501",   # line-too-long (handled by formatter)
    "B905",   # zip-without-explicit-strict
    "UP007",  # Use X | Y for type annotations (keep Union for compatibility)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001", # Unused function argument (common in test fixtures)
    "S101",   # Use of assert (expected in tests)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

# Black code formatter
[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--color=yes",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "smoke: marks tests as smoke tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning:pyaudio",
    "ignore::UserWarning:gradio",
    "ignore::RuntimeWarning:unittest.mock",
    "ignore::RuntimeWarning:_pytest.unraisableexception",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
    "ignore:.*AsyncMockMixin.*was never awaited:RuntimeWarning",
    "ignore:.*Enable tracemalloc.*:RuntimeWarning",
]
asyncio_mode = "auto"
timeout = 300

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 95

[tool.coverage.html]
directory = "coverage_reports/html"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used, shell injection (controlled usage)

# Pydocstyle documentation linting
[tool.pydocstyle]
convention = "numpy"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105"]  # Allow missing docstrings initially
match_dir = "^(?!tests).*"
